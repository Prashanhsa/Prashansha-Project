# ADVANCED ML + DL PROJECT - JUPYTER NOTEBOOK VERSION
# Title: Predicting House Prices & Classifying Emotions from Faces


# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import os

# Step 2: Load your dataset
# Ensure the dataset file exists or ask the user to provide it
file_path = "house_data.csv"
if not os.path.exists(file_path):
    raise FileNotFoundError(f"The file '{file_path}' was not found. Please make sure it exists in the working directory.")

house_data = pd.read_csv(file_path)
house_data.head()

# Step 3: Data Preprocessing
house_data = house_data.dropna()  # Drop missing values
X = house_data.drop("Price", axis=1)  # Features
y = house_data["Price"]  # Target variable

# Step 4: Feature Scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 5: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 6: Train a Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 7: Make Predictions and Evaluate
y_pred = model.predict(X_test)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))


# Step 1: Import TensorFlow and Keras
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Step 2: Set image dimensions
IMG_HEIGHT, IMG_WIDTH = 48, 48

# Step 3: Create ImageDataGenerator for training and validation
train_gen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

# Step 4: Load training data
emotion_dataset_path = 'emotion_dataset'
if not os.path.exists(emotion_dataset_path):
    raise FileNotFoundError(f"The folder '{emotion_dataset_path}' was not found. Please make sure it exists and contains subfolders for each emotion category.")

train_data = train_gen.flow_from_directory(
    emotion_dataset_path,  # Folder path with subfolders for each emotion
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

val_data = train_gen.flow_from_directory(
    emotion_dataset_path,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

# Step 5: Build CNN Model
cnn_model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(train_data.num_classes, activation='softmax')
])

# Step 6: Compile the model
cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Step 7: Train the model
cnn_model.fit(train_data, validation_data=val_data, epochs=5)

# Step 8: Save the model
cnn_model.save("emotion_cnn_model.h5")
print("Model saved successfully.")
